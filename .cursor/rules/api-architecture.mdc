# API Architecture & Backend Patterns

## Technology Stack
- **Framework**: Next.js API Routes
- **Database**: Supabase PostgreSQL
- **Auth**: Supabase Auth with JWT validation
- **Storage**: Supabase Storage for photos
- **Hosting**: Vercel (free tier)

## API Route Structure
```
app/api/
├── auth/                  # Auth-related endpoints
│   ├── callback/         # OAuth callback
│   └── logout/           # Logout endpoint
├── trees/                # Tree management
│   ├── route.ts          # GET (list), POST (create)
│   └── [id]/            # Tree-specific operations
│       ├── route.ts      # GET, PUT, DELETE
│       ├── members/      # Member operations
│       ├── relationships/ # Relationship operations
│       └── invite/       # Invite management
├── members/              # Member operations
│   └── [id]/            # Member-specific operations
├── relationships/        # Relationship operations
└── upload/              # Photo upload endpoints
```

## Authentication & Authorization

### JWT Validation Pattern
```typescript
// Middleware for all protected routes
export async function validateAuth(request: Request) {
  const token = request.headers.get('Authorization')?.replace('Bearer ', '')
  if (!token) throw new Error('No token provided')
  
  const { data: { user }, error } = await supabase.auth.getUser(token)
  if (error || !user) throw new Error('Invalid token')
  
  return user
}
```

### Tree Permission Check
```typescript
// Check if user has access to tree
export async function checkTreeAccess(treeId: string, userId: string) {
  const { data, error } = await supabase
    .from('Trees')
    .select('admin_user')
    .eq('id', treeId)
    .single()
  
  if (error || !data) throw new Error('Tree not found')
  
  // Check if user is admin or has invite
  const isAdmin = data.admin_user === userId
  const hasInvite = await checkInviteAccess(treeId, userId)
  
  return isAdmin || hasInvite
}
```

## Core API Endpoints

### Trees API
```typescript
// GET /api/trees - List user's trees
// POST /api/trees - Create new tree
// GET /api/trees/[id] - Get tree with members and relationships
// PUT /api/trees/[id] - Update tree details
// DELETE /api/trees/[id] - Delete tree (admin only)
```

### Members API
```typescript
// POST /api/trees/[id]/members - Add new member
// PUT /api/members/[id] - Update member
// DELETE /api/members/[id] - Delete member
// POST /api/members/[id]/photo - Upload member photo
```

### Relationships API
```typescript
// POST /api/relationships - Create relationship
// DELETE /api/relationships/[id] - Delete relationship
// GET /api/trees/[id]/relationships - Get all relationships for tree
```

### Invites API
```typescript
// POST /api/trees/[id]/invite - Generate invite token
// GET /api/invite/[token] - Validate invite token
// POST /api/invite/[token]/accept - Accept invite
```

## Error Handling Pattern
```typescript
export async function handleApiError(error: unknown) {
  console.error('API Error:', error)
  
  if (error instanceof Error) {
    return Response.json(
      { error: error.message },
      { status: 400 }
    )
  }
  
  return Response.json(
    { error: 'Internal server error' },
    { status: 500 }
  )
}
```

## File Upload Pattern
```typescript
// Photo upload with Supabase Storage
export async function uploadPhoto(file: File, memberId: string) {
  const fileName = `${memberId}/${Date.now()}-${file.name}`
  
  const { data, error } = await supabase.storage
    .from('member-photos')
    .upload(fileName, file)
  
  if (error) throw new Error('Upload failed')
  
  return data.path
}
```

## Security Best Practices
1. **JWT Validation**: Validate tokens on every protected route
2. **Tree Isolation**: Ensure users can only access their trees
3. **Input Validation**: Validate all inputs with Zod or similar
4. **Rate Limiting**: Implement rate limiting for public endpoints
5. **CORS**: Configure CORS for frontend domain only
6. **HTTPS**: All endpoints served over HTTPS via Vercel

## Performance Optimizations
1. **Database Indexing**: Proper indexes on tree_id, user_id
2. **Connection Pooling**: Use Supabase connection pooling
3. **Caching**: Cache frequently accessed tree data
4. **Pagination**: Implement pagination for large datasets
5. **Compression**: Enable gzip compression on Vercel
description:
globs:
alwaysApply: false
---
