# Development Workflow & Best Practices

## Project Setup

### Initial Setup
```bash
# Create Next.js project with TypeScript
npx create-next-app@latest family-tree --typescript --tailwind --app --src-dir

# Install dependencies
npm install @supabase/supabase-js reactflow zustand @types/uuid
npm install -D @types/node

# Initialize Supabase
npx supabase init
```

### Environment Variables
```env
# .env.local
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
```

## Development Principles

### 1. Free-First Architecture
- **No Paid Services**: All tools must be free tier or open source
- **Zero Email Cost**: Use magic links instead of email services
- **Open Source**: Prefer MIT/Apache licensed libraries
- **Self-Hosted Options**: Consider self-hosting alternatives

### 2. Security & Privacy
- **Tree Isolation**: Users can only access their own trees
- **JWT Validation**: Validate tokens on every API route
- **Input Sanitization**: Sanitize all user inputs
- **HTTPS Only**: All communication over HTTPS
- **Photo Security**: Signed URLs with short TTL

### 3. Performance First
- **Virtualization**: Only render visible tree nodes
- **Lazy Loading**: Load data progressively
- **Caching**: Client-side caching of tree data
- **Optimization**: Debounced search, memoized components
- **Mobile Performance**: Optimize for mobile devices

### 4. User Experience
- **Day-1 Win**: Map 3 generations in under 5 minutes
- **Intuitive Interface**: Minimal learning curve
- **Responsive Design**: Work on all device sizes
- **Accessibility**: WCAG 2.1 AA compliance
- **Offline Capability**: Basic functionality without internet

## Code Quality Standards

### TypeScript
- **Strict Mode**: Enable all strict TypeScript options
- **Type Safety**: No `any` types, proper interfaces
- **Error Handling**: Comprehensive error handling
- **Documentation**: JSDoc comments for complex functions

### Testing Strategy
```typescript
// Unit tests for relationship algorithms
describe('Relationship Calculation', () => {
  test('should calculate blood relations correctly', () => {
    // Test blood relationship derivation
  })
  
  test('should calculate in-law relations correctly', () => {
    // Test marriage relationship derivation
  })
})
```

### Code Organization
```
src/
├── types/           # TypeScript type definitions
├── lib/            # Utility functions and helpers
├── hooks/          # Custom React hooks
├── components/     # Reusable UI components
├── stores/         # Zustand state stores
└── app/           # Next.js app router pages
```

## Git Workflow

### Branch Strategy
- `main`: Production-ready code
- `develop`: Integration branch
- `feature/*`: New features
- `bugfix/*`: Bug fixes
- `hotfix/*`: Critical production fixes

### Commit Messages
```
feat: add member photo upload functionality
fix: resolve relationship calculation edge case
docs: update API documentation
refactor: optimize tree rendering performance
test: add unit tests for relationship algorithms
```

## Deployment Strategy

### Vercel Deployment
1. **Automatic Deployments**: Connect GitHub to Vercel
2. **Environment Variables**: Set in Vercel dashboard
3. **Preview Deployments**: Automatic for pull requests
4. **Production Deployments**: Manual approval required

### Database Migrations
```sql
-- Use Supabase migrations for schema changes
-- Version control all database changes
-- Test migrations on staging environment
```

## Monitoring & Analytics

### Performance Monitoring
- **Core Web Vitals**: Monitor LCP, FID, CLS
- **Tree Rendering**: Track canvas performance
- **API Response Times**: Monitor backend performance
- **Error Tracking**: Log and alert on errors

### User Analytics
- **Tree Creation Rate**: Track new tree creation
- **Member Addition**: Monitor user engagement
- **Invite Acceptance**: Track collaboration metrics
- **Session Duration**: Measure user retention

## Future Considerations

### Scalability
- **Database Optimization**: Indexing strategy for large trees
- **Caching Strategy**: Redis for high-traffic scenarios
- **CDN**: Image delivery optimization
- **Load Balancing**: Multiple server instances

### Feature Roadmap
1. **MVP**: Core tree building and relationships
2. **Phase 2**: GEDCOM import/export
3. **Phase 3**: PDF/PNG export
4. **Phase 4**: Change history and undo
5. **Phase 5**: Mobile-first responsive design
description:
globs:
alwaysApply: false
---
