# Frontend Architecture & Components

## Technology Stack
- **Framework**: Next.js 14+ with App Router
- **UI Library**: React 18+
- **Canvas**: React Flow for tree visualization
- **Styling**: Tailwind CSS
- **State Management**: Zustand or React Context
- **TypeScript**: Strict mode enabled

## Project Structure
```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/            # Auth group routes
│   ├── dashboard/         # Dashboard page
│   ├── tree/[id]/        # Tree canvas page
│   ├── invite/           # Invite acceptance page
│   └── api/              # API routes
├── components/            # Reusable components
│   ├── ui/               # Base UI components
│   ├── tree/             # Tree-specific components
│   └── forms/            # Form components
├── lib/                  # Utilities and helpers
├── hooks/                # Custom React hooks
├── types/                # TypeScript type definitions
└── styles/               # Global styles
```

## Core Components

### TreeCanvas Component
- **Purpose**: Main tree visualization with pan/zoom
- **Technology**: React Flow
- **Features**: Infinite canvas, custom nodes, relationship lines
- **Performance**: Virtualized rendering for large trees

### MemberCard Component
- **Purpose**: Individual member representation
- **Features**: Photo thumbnail, name, birthdate, menu
- **Actions**: Add relative, edit, delete, view details

### MemberDetail Sidebar
- **Purpose**: Full member information and editing
- **Features**: Full bio, photo upload, relationship management
- **Permissions**: Role-based editing capabilities

### SearchBar Component
- **Purpose**: Real-time search and navigation
- **Features**: Autocomplete, keyboard shortcuts, highlight results

## State Management

### Tree State (Zustand Store)
```typescript
interface TreeState {
  members: Member[]
  relationships: Relationship[]
  selectedMember: Member | null
  searchQuery: string
  zoom: number
  pan: { x: number; y: number }
}
```

### User State
```typescript
interface UserState {
  user: User | null
  trees: Tree[]
  currentTree: Tree | null
  permissions: Permission[]
}
```

## Key UX Patterns

### Infinite Canvas
- Mouse drag for panning
- Scroll/pinch for zooming
- Smooth animations
- Responsive to viewport

### Member Interactions
- Click for details
- Right-click for context menu
- Drag for relationship creation
- Keyboard shortcuts for power users

### Responsive Design
- Mobile-first approach
- Touch gestures for mobile
- Desktop optimizations
- Accessible design patterns

## Performance Considerations
- **Virtualization**: Only render visible nodes
- **Lazy Loading**: Load tree data progressively
- **Caching**: Client-side caching of tree data
- **Optimization**: Debounced search, memoized components
description:
globs:
alwaysApply: false
---
