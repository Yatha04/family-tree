# Database Schema & Data Model

## Core Tables

### Trees Table
```sql
CREATE TABLE Trees (
  id          UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name        TEXT NOT NULL,
  admin_user  UUID REFERENCES auth.users (id),
  created_at  TIMESTAMP DEFAULT NOW()
);
```

### Members Table
```sql
CREATE TABLE Members (
  id         UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tree_id    UUID REFERENCES Trees(id) ON DELETE CASCADE,
  name       TEXT NOT NULL,
  birthdate  DATE,
  photo_path TEXT,       -- Supabase Storage path
  summary    TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);
```

### Relationships Table
```sql
CREATE TABLE Relationships (
  id         UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tree_id    UUID REFERENCES Trees(id) ON DELETE CASCADE,
  a_id       UUID REFERENCES Members(id) ON DELETE CASCADE,
  b_id       UUID REFERENCES Members(id) ON DELETE CASCADE,
  type       TEXT        -- 'parent' or 'spouse'
);
```

### Invites Table
```sql
CREATE TABLE Invites (
  id         UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tree_id    UUID REFERENCES Trees(id) ON DELETE CASCADE,
  token      TEXT UNIQUE NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  role       TEXT CHECK(role IN ('editor','viewer')) DEFAULT 'editor',
  accepted   BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW()
);
```

## Key Design Principles

1. **Cascade Deletes**: All related data is deleted when a tree is removed
2. **UUID Primary Keys**: Use UUIDs for all primary keys for security and scalability
3. **Tree Isolation**: All data is scoped to specific trees for privacy
4. **Flexible Relationships**: Support both parent-child and spouse relationships
5. **Invite System**: Token-based invites with expiration and role management

## Relationship Types
- `parent`: Direct parent-child relationship (blood relation)
- `spouse`: Marriage relationship (in-law connections)

## Auto-Derived Relationships
The application automatically calculates:
- **Blood Relations**: Siblings, grandparents, aunts/uncles, cousins, etc.
- **In-Law Relations**: Parents-in-law, siblings-in-law, children-in-law

## Indexing Strategy
- Index on `tree_id` for all tables
- Index on `a_id` and `b_id` in Relationships table
- Index on `token` in Invites table
description:
globs:
alwaysApply: false
---
